from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, CallbackQuery
from aiogram_calendar import SimpleCalendar, simple_cal_callback
import sqlite3
from CalendarApi import GoogleCalendar
from config import tg_bot_token
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

start_kb = ReplyKeyboardMarkup(resize_keyboard=True, )


def insert_client_to_db(name: str, date: int):
    """
    base for all users
    """
    sqlite_connection = sqlite3.connect('DBforTG.sqlite')
    cursor = sqlite_connection.cursor()
    info = cursor.execute('SELECT * FROM clients WHERE name=?', (name,))
    if info.fetchone() is None:
        cursor.execute('INSERT INTO clients (name, date) VALUES (?, ?)', (name, date))
        print('–ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∞–Ω–∞', cursor.rowcount)
        sqlite_connection.commit()
    else:
        print("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    cursor.close()


@dp.message_handler(Text(equals='–ö—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è'))
async def get_info(message: types.Message):
    obj = GoogleCalendar()
    result = obj.get_events_list()
    for i in range(0, len(result)):
        name = result[i][0]
        date = result[i][1][:16].replace('T', ', ')
        await message.answer(f'@{name}, {date}')


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ['–û–±–æ –º–Ω–µ', '–ü—Ä–∞–π—Å', '–ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', reply_markup=keyboard)


@dp.message_handler(Text(equals='–ü—Ä–∞–π—Å'))
async def get_price(message: types.Message):
    await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
    await message.answer('1. –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ 800—Ä.\n'
                         '2. –û–¥–∏–Ω —É—Ä–æ–∫ 2000—Ä.\n'
                         '3. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è 7600—Ä.\n'
                         '4. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π 14400—Ä.\n'
                         '5. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 16 –∑–∞–Ω—è—Ç–∏–π 26.400—Ä.\n'
                         '\n'
                         '–í—ã–µ–∑–¥ –∫ –í–∞–º –Ω–∞ –¥–æ–º - –≤—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è:\n'
                         '–û–¥–∏–Ω —É—Ä–æ–∫ 4000—Ä.\n'
                         '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è 15200—Ä.\n'
                         '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è 28800.\n'
                         '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è 52800.\n')


@dp.message_handler(Text(equals='–û–±–æ –º–Ω–µ'))
async def get_about(message: types.Message):
    await message.answer('–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠–ª–∏–Ω–∞!\n'
                         '‚Ä¢–°–æ –º–Ω–æ–π —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è –∏–≥—Ä–∞—Ç—å –Ω–∞ üéπ –∏ –∏—Å–ø–æ–ª–Ω–∏—à—å —Å–≤–æ—é –º–µ—á—Ç—É!\n'
                         '‚Ä¢–ò–≥—Ä–∞—é –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Öüî•')


@dp.message_handler(Text(equals='–ó–∞–ø–∏—Å—å –Ω–∞ —É—Ä–æ–∫'))
async def get_calendar(message: types.Message):
    await message.answer('–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ!\n'
                         '–ê –¥–∞–ª–µ–µ, —è —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Å—å!')
    await message.reply('–î–µ—Ä–∂–∏!', reply_markup=start_kb)
    await message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–∞—Ç—É: ", reply_markup=await SimpleCalendar().start_calendar())


@dp.callback_query_handler(simple_cal_callback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict):
    try:
        selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
        if selected:
            await callback_query.message.answer(
                f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {date.strftime("%d/%m/%Y")}\n'
                f'–Ø —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚ò∫Ô∏è\n'
                f'–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
                f'–ñ–º–∞–∫–∞–π /start',
                reply_markup=start_kb
            )

            user_id = callback_query.from_user.username
            await bot.send_message(541893004, f'–ì–æ—Å–ø–æ–¥–∏–Ω @{user_id} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {date.strftime("%d/%m/%Y")}!')
            insert_client_to_db(user_id, date)

            obj = GoogleCalendar()
            event = obj.create_event_dict(user_id, callback_data['year'], callback_data['month'], callback_data['day'])
            obj.create_event(event)

    except sqlite3.Error as error:
        print('–û—à–∏–±–∫–∞', error)


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer('–Ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòÖ\n'
                         '–ñ–º–∞–∫–∞–π /start')


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    main()
